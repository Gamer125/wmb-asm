@Stackdump: bottom to top: ParseHTMLImageFields -> smashed lr is 0x21ec0 in decom bin(local stack size 0x20) -> 0x02023c98(0x1fc98) (variables stack size is 0x58, saved regs 0x28, total 0x80) -> 0x02023a78(0x1fa78) (variables stack size is 0x58, saved regs 0x28, total 0x80) -> 0x02023580(0x1f580) -> 0x02011684(0xd684) -> 0x01ff9f28(ITCM 0x1f28) -> 0x01ffa258(ITCM 0x2258) -> 0x020377a8(0x337a8) -> 0x02037858(0x33858) -> 0x02005080(main)

@mov r1, #0
@ldr r0, =0x022eff48
@ldr r2, =0x022eff90
@ldr r3, =0x022effa4
@str r1, [r0]
@str r1, [r0, #4] @ Disable URL table lookup, so we can directly specify the URL.
@str r1, [r0, #12]	
@str r1, [r2]
@str r1, [r3]
@str r1, [r3, #4]
@str r1, [r3, #8]
@str r1, [r3, #12]
@str r1, [r3, #16]
@str r1, [r3, #20]

@ldr r0, =0x022f0240
@ldr r1, =0xe3a00001
@str r1, [r0] @ Patch out RSA verification.

@mov r6, sp
@mov r0, r6
@ldr r0, =0x02000000
@ldr r1, =0x600
@add r1, r1, r0
@mov r2, #0
@mov r4, r7
@bl eeprom_write
@mov r7, r4

@ldr r0, =0x020008e8
@mov r1, #0
@str r1, [r0] @ Patch out the call to DecompressArm9.
@ldr r0, =0x02000984
@ldr r1, =0x02003000
@str r1, [r0]

@ldr r3, =0x027ffe00
@ldr r0, [r3, #0x24]
@ldr r1, [r3, #0x34]

@ldr r2, =original_arm7execute_addr
@add r2, r2, r7
@str r1, [r2]
@str r0, [r2, #4]

@ldr r2, =arm9main
@add r2, r2, r7
@str r2, [r3, #0x24]

@ldr r2, =arm7main
@add r2, r2, r7
@str r2, [r3, #0x34]

@ldr r0, =arm9main_tempr7
@add r0, r0, r7
@str r7, [r0]

@ldr r0, =0x04000130
@checkbtnA:
@ldrh r1, [r0]
@tst r1, #1
@bne checkbtnA

@mov r0, r3
@add r1, r0, #0x200
@mov r2, #0
@bl eeprom_write

@str r7, [sp]
@mov r0, sp
@add r1, r0, #0x200
@mov r2, #0
@bl eeprom_write

@mov r6, sp

@ldr r0, =ndsloadstub
@ldr r1, =ndsloadstub_poolend
@ldr r2, =0x01ffbb00
@add r0, r0, r7
@add r1, r1, r7

@ndsloadstub_relocate:
@ldr r3, [r0]
@str r3, [r2]
@add r0, r0, #4
@add r2, r2, #4
@cmp r0, r1
@blt ndsloadstub_relocate

@ldr r0, =0x01ffbb00
@mov lr, pc
@bx r0

@mov r0, #0
@ldr r0, =url
@ldr r1, =params
@add r0, r0, r7
@add r1, r1, r7
@ldr r2, =0x022eff38
@ldr r2, =0x022efb40
@mov lr, pc
@bx r2 @ This attempts to execute the gamedl function.

@ldmia sp!, {r3, r4, r5, r6, r7, r8, r9} @ Return to main, etc.
@add sp, sp, #4

@add sp, sp, #88
@ldmia	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp}
@add sp, sp, #4

@add sp, sp, #88
@ldmia	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp}
@add sp, sp, #4

@ldmia	sp!, {r4, r5, r6}
@add sp, sp, #4

@ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl}
@add sp, sp, #4

@add sp, sp, #24
@pop {r3, r4, r5}
@add sp, sp, #4

@add sp, sp, #16
@add sp, sp, #12
@add sp, sp, #4

@ldmia	sp!, {r4, r5, r6}
@add sp, sp, #4

@ldr r3, =0x022efde0
@ldr r0, =url
@add r0, r0, r7
@ldr r1, =0x02360a8c
@ldr r2, =0x4001
@mov lr, pc
@bx r3 @ HTTPS download function used by the gamedl function.

@add r0, sp, #0x20 @ This attempts to return to the function that calls the function that calls the stack smashed function.
@add r5, r0, #4
@add r0, r0, #0x80
@ldr r6, [r0]

@ldr r0, =0x020c9800
@ldrh r1, [r0, #44]
@sub r1, r1, #1
@strh r1, [r0, #44]

@ldr r0, =original_imgsrc
@add r0, r0, r7
@ldr r3, =0x02025eb8
@ldr r3, =0x0202658c
@mov lr, pc
@bx r3

@ldr pc, =0x02025ec0

@ldr r0, =original_imgsrc
@add r0, r0, r7
@ldr r1, [sp, #0x28]
@ldr r2, =0x0202658c
@mov lr, pc
@bx r2

@ldr r0, =end
@add r0, r0, r7
@mov r4, r0	

@mov r0, r4
@ldmia sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

@bl	initgfx
@bl	update_map
@bl	gfxcpy

@mov r0, sp
@mov r1, #0x10
@bl draw
@b forever

@mov r0, #1
@str r0, [r8] @ REG_IME = 1;

@bl	initgfx
@bl	update_map
@bl	gfxcpy

@mov r0, r6
@mov r1, #0x10
@bl draw

