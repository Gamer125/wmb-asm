The Wmb Asm Module supports Packet Modules. This document describes how to write your own plugins, and use them with Wmb Asm.
The DS version of Wmb Asm does not support plugins, since there's no way to use modules with DS homebrew.
Currently, plugins have been disabled in Wmb Asm Module 2.0b, due to a lack of a SDK. It would still be possible to write
your own plugins with then enabled, but it wouldn't be easy to do. Get the Wmb Asm Module source code from SVN, and
go through asm.cpp for how to enable plugins. Enabling it should be fairly easy.

The plugins need to be in the same directory as the Wmb Asm Module.

Here's the functions that need exported, along with the calling convention.
__declspec (dllexport) void Reset();
__declspec (dllexport) bool Handle802_11();

Reset is called during initialization, and when a reset is done.
Handle802_11 is the main function. Return value is important, also. At first, the current plugin variable in Wmb Asm Module
is set to -1. When Handle802_11 in Wmb Asm Module is called, it checks if that var is -1. If it is not -1, it only calls
the plugin set for use. But when it is -1, it calls the Handle802_11 function in all of the plugins, including the built-in WMB
Packet Module, and the first one that returns 1/true, that is set for the default module, and that is always used until a reset is done.
When a reset is done, the default module is set to nothing, -1, and the process repeats.

You'll need the wmb_asm.h header file. That can be obtained from SVN. For packets, there's an AVS capture header before
the actual packet data. The Wmb Asm Module takes care of this header, and your plugin can only see the actual packet data.
But if really want to investigate the AVS data, just subtract the data parameter pointer minus 64, and add to the length parameter
by 64, and you can now access AVS. You can either write your own code for handling 802.11 and CRC, or use the utils.cpp
file from the Wmb Asm Module source code.

Yes, this documention isn't very good, but there's plans for a Packet Module SDK. And when that gets done, I'm considering
moving the built-in WMB module to a plugin. Once that happens, and when at least one more plugin becomes available,
if you wanted to decrease the download size, you could just download the Wmb Asm Module, the Command-Line, and only the
modules you wanted to use. Which would save some space, if you didn't download all of the plugins.

See the wmb.cpp source code file, the WMB Packet Module, for some help with writing plugins, until the SDK becomes available.
